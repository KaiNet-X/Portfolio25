@page "/projects/work/widget"
<h1>Communications widget</h1>

<div>
<img src="/photos/widget.png" alt="Web widget image" class="me-3" style="float: left" />
    <section>
        <h2>Overview</h2>
        <p>
            During my second summer at John Deere on the ExpertConnect team, one of the top requested features was a 
            “Text now” widget. At the time, dealers who wanted this functionality were using third-party options
            which served as an initial point of contact for their customers. This required extra work on the dealer's
            side to get it working with ExpertConnect, as well as an added subscription cost. The ExpertConnect web 
            widget was designed to streamline the effort required by dealers to get this function, as well as reduce
            their operating costs.
        </p>
        <p>
            The web widget provides a seamless experience for dealers and their customers, allowing tickets to easily
            be routed to the correct team. The widget is customizable, allowing dealers to create multiple widget 
            instances for different situations, each with customization options including text, colors, allowed domains,
            and more.
        </p>
    </section>
    <section>
        <h2>Widget frontend</h2>
        <p>
            I developed the frontend of the widget using TSX and bundled it using Bun. It has two rendering modes which can
            be selected in the customization page: direct rendering, and iframe rendering. The default choice is direct
            as it is slightly more performant on lower-end and mobile devices, but iframe has the benefit of not being affected 
            by custom css. There are many more customization options, including positioning, colors, different screens which 
            can be enabled, allowed CORs origins, and more. These settings are pulled from the external API on initial 
            load and cached for one day, unless otherwise specified on the customization page. It is designed to be responsive,
            changing positioning rules and even scale down if it would otherwise clip out of screen.
        </p>
    </section>
    <section>
        <h2>Customization page</h2>
        <p>
            The customization page is included with the ExpertConnect app which is written in React/NextJS and TypeScript.
            It allows for multiple widget instances to be configured which can be placed in different locations by the dealer's
            preference. It has all of the customization options listed above as well as a live preview of the widget. The 
            preview dynamically updates as the dealer customizes it, switching screens to the one the dealer is working on.
        </p>
    </section>
    <section>
        <h2>Backend</h2>
        <p>
            ExpertConnect's API service is written in C# using ASP.NET Core. I wrote several management endpoints for
            the widget which are used by the customization page to manage the widgets, and two external endpoints: one
            for getting the configuration, and one for submitting the ticket. Since these endpoints are open to the web,
            additional security measures were necessary. These endpoints are behind Azure's APIM gateway. I created
            custom IP-based and instance-based rate limiting logic on the gateway, as well as an exception to allow all
            CORs origins and forward the information to the API. A custom type filter on the controller level handled 
            CORs, since it is configurable on a per-widget basis. Each widget has it's own service account associated 
            with it permitted to call the external endpoints. Each company gets an APIM subscription shared between its
            widgets. For these reasons, the internal endpoints also use the Azure SDK to manage APIM subscriptions and
            users.
        </p>
    </section>
</div>